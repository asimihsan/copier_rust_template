// Package binding provides Go bindings for the test-project arithmetic expression parser.
package binding

/*
#cgo CFLAGS: -I${SRCDIR}/..
#cgo LDFLAGS: -L${SRCDIR}/../../target/debug -l{{ project_slug_underscore}}_go

#include "binding.h"
#include <stdlib.h>
*/
import "C"
import (
	"context"
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// Version of the binding package
const Version = "1.0.0"

// Expression represents a parsed arithmetic expression
type Expression struct {
	// Result contains the computed value
	Result string
	// Raw contains the original expression
	Raw string
}

// String returns a string representation of the expression
func (e *Expression) String() string {
	return fmt.Sprintf("%s = %s", e.Raw, e.Result)
}

// ParseError represents an error that occurred during parsing
type ParseError struct {
	msg string
}

func (e *ParseError) Error() string {
	return e.msg
}

// Parse parses an arithmetic expression with context support.
// It returns an Expression containing both the original input and the computed result.
// The context can be used to cancel long-running operations.
func Parse(ctx context.Context, input string) (*Expression, error) {
	// Check context before proceeding
	select {
	case <-ctx.Done():
		return nil, ctx.Err()
	default:
	}

	// Convert input to C string
	cInput := C.CString(input)
	defer C.free(unsafe.Pointer(cInput))

	// Call Rust function
	cResult := C.parse_expression(cInput)
	if cResult == nil {
		return nil, &ParseError{msg: "null pointer returned from parser"}
	}
	
	// Ensure the result is freed
	defer C.free_rust_string(cResult)

	// Convert result back to Go string
	result := C.GoString(cResult)

	// Check for error prefix
	if len(result) > 6 && result[:6] == "Error:" {
		return nil, &ParseError{msg: result[7:]}
	}

	// Return successful result
	return &Expression{
		Result: result,
		Raw:    input,
	}, nil
}

// MustParse is like Parse but panics on error.
// It's useful for expressions that are known to be valid.
func MustParse(input string) *Expression {
	expr, err := Parse(context.Background(), input)
	if err != nil {
		panic(err)
	}
	return expr
}

// ParseConcurrent parses multiple expressions concurrently.
// It returns a slice of results in the same order as the inputs.
// If any parse fails, it returns an error and any successfully parsed expressions.
func ParseConcurrent(ctx context.Context, inputs []string) ([]*Expression, error) {
	var (
		wg      sync.WaitGroup
		mu      sync.Mutex
		results = make([]*Expression, len(inputs))
		errs    = make([]error, len(inputs))
	)

	// Process each input concurrently
	for i, input := range inputs {
		wg.Add(1)
		go func(idx int, expr string) {
			defer wg.Done()
			result, err := Parse(ctx, expr)
			mu.Lock()
			results[idx] = result
			errs[idx] = err
			mu.Unlock()
		}(i, input)
	}

	// Wait for all goroutines to complete
	wg.Wait()

	// Check for errors
	var errMsgs []string
	for i, err := range errs {
		if err != nil {
			errMsgs = append(errMsgs, fmt.Sprintf("input %d: %v", i, err))
		}
	}

	if len(errMsgs) > 0 {
		return results, &ParseError{msg: fmt.Sprintf("multiple parse errors: %v", errMsgs)}
	}

	return results, nil
}

// init registers a finalizer for the package to ensure cleanup
func init() {
	runtime.SetFinalizer(&struct{}{}, func(interface{}) {
		// Any cleanup needed when the package is unloaded
	})
}
