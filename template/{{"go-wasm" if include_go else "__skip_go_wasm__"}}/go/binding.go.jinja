package binding

import (
	"context"
	"crypto/rand"
	_ "embed"
	"errors"
	"fmt"
	"sync"
	"sync/atomic"
	"time"

	"github.com/tetratelabs/wazero"
	"github.com/tetratelabs/wazero/imports/wasi_snapshot_preview1"
)

// Version of the binding package
const Version = "1.0.0"

var (
	// Global runtime instance
	runtimeOnce sync.Once
	runtime     wazero.Runtime
	runtimeMutex sync.RWMutex

	// Pre-compiled module to be instantiated for each request
	compiledModuleOnce sync.Once
	compiledModule     wazero.CompiledModule
	compiledModuleErr  error

	// Counter for generating unique module names
	moduleNameCounter uint64

	//go:embed {{ project_slug_underscore }}_go_wasm.wasm
	wasmBytes []byte
)

// Expression represents a parsed arithmetic expression
type Expression struct {
	// Result contains the computed value
	Result string
	// Raw contains the original expression
	Raw string
}

// String returns a string representation of the expression
func (e *Expression) String() string {
	return fmt.Sprintf("%s = %s", e.Raw, e.Result)
}

// ParseError represents an error that occurred during parsing
type ParseError struct {
	msg string
}

func (e *ParseError) Error() string {
	return e.msg
}

// Helper function to unpack a pointer/length pair from a u64
func unpackPtrLen(packed uint64) (uint32, uint32) {
	ptr := uint32(packed >> 32)
	len := uint32(packed & 0xFFFFFFFF)
	return ptr, len
}

// Helper to get a unique module name
func getUniqueModuleName() string {
	return fmt.Sprintf("{{ project_slug_underscore }}_go_wasm_%d", atomic.AddUint64(&moduleNameCounter, 1))
}

// Initialize the WASM runtime and compile the module
func initRuntime(ctx context.Context) (wazero.Runtime, wazero.CompiledModule, error) {
	// Initialize the runtime
	var rt wazero.Runtime
	runtimeOnce.Do(func() {
		runtime = wazero.NewRuntime(ctx)
		// Instantiate WASI
		wasi_snapshot_preview1.MustInstantiate(ctx, runtime)
	})

	// Must acquire read lock to access runtime
	runtimeMutex.RLock()
	rt = runtime
	runtimeMutex.RUnlock()
	
	if rt == nil {
		return nil, nil, errors.New("failed to initialize runtime")
	}

	// Pre-compile the module (once)
	compiledModuleOnce.Do(func() {
		compiledModule, compiledModuleErr = rt.CompileModule(ctx, wasmBytes)
	})

	return rt, compiledModule, compiledModuleErr
}

// Parse parses an arithmetic expression with context support.
// It returns an Expression containing both the original input and the computed result.
// The context can be used to cancel long-running operations.
func Parse(ctx context.Context, input string) (*Expression, error) {
	// Check context before proceeding
	select {
	case <-ctx.Done():
		return nil, ctx.Err()
	default:
	}

	// Initialize the runtime and get compiled module
	rt, compiled, err := initRuntime(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize runtime: %w", err)
	}

	// Each parse operation gets its own module instance with a unique name
	// This prevents name collisions and race conditions
	moduleConfig := wazero.NewModuleConfig().
		WithName(getUniqueModuleName()).
		WithArgs("{{ project_slug_underscore }}_go_wasm").  // Program name for WASI
		WithSysWalltime().           // Enable access to wall time
		WithSysNanotime().           // Enable access to monotonic time
		WithRandSource(rand.Reader)  // Use crypto/rand as random source

	// Create a new module instance for this operation
	module, err := rt.InstantiateModule(ctx, compiled, moduleConfig)
	if err != nil {
		return nil, fmt.Errorf("failed to instantiate WASM module: %w", err)
	}
	defer module.Close(ctx) // Clean up this instance when done

	// Get the needed export functions
	allocate := module.ExportedFunction("allocate")
	deallocate := module.ExportedFunction("deallocate")
	parseExpr := module.ExportedFunction("parse_expression")
	isParseError := module.ExportedFunction("is_parse_error")

	if allocate == nil || deallocate == nil || parseExpr == nil || isParseError == nil {
		return nil, errors.New("required functions not exported from WASM module")
	}

	// Allocate memory for the input
	inputBytes := []byte(input)
	inputLen := uint64(len(inputBytes))

	allocResults, err := allocate.Call(ctx, inputLen)
	if err != nil {
		return nil, fmt.Errorf("failed to allocate memory: %w", err)
	}
	inputPtr := allocResults[0]

	// Make sure we deallocate the input memory when we're done
	defer deallocate.Call(ctx, inputPtr, inputLen) //nolint:errcheck

	// Copy the input into WASM memory
	if !module.Memory().Write(uint32(inputPtr), inputBytes) {
		return nil, errors.New("failed to write to WASM memory")
	}

	// Call the parse_expression function
	results, err := parseExpr.Call(ctx, inputPtr, inputLen)
	if err != nil {
		return nil, fmt.Errorf("failed to call parse_expression: %w", err)
	}

	// Unpack the result (ptr in high 32 bits, len in low 32 bits)
	packed := results[0]
	if packed == 0 {
		return nil, errors.New("allocation error in WASM module")
	}

	resultPtr, resultLen := unpackPtrLen(packed)

	// Make sure we deallocate the result memory when we're done
	defer deallocate.Call(ctx, uint64(resultPtr), uint64(resultLen)) //nolint:errcheck

	// Check if the result is an error
	errorCheckResults, err := isParseError.Call(ctx, uint64(resultPtr), uint64(resultLen))
	if err != nil {
		return nil, fmt.Errorf("failed to check if result is error: %w", err)
	}

	// Read the result from memory
	resultBytes, ok := module.Memory().Read(resultPtr, resultLen)
	if !ok {
		return nil, errors.New("failed to read result from WASM memory")
	}

	resultStr := string(resultBytes)

	// If it's an error, return it
	if errorCheckResults[0] != 0 {
		return nil, &ParseError{msg: resultStr}
	}

	// Return successful result
	return &Expression{
		Result: resultStr,
		Raw:    input,
	}, nil
}

// MustParse is like Parse but panics on error.
// It's useful for expressions that are known to be valid.
func MustParse(input string) *Expression {
	expr, err := Parse(context.Background(), input)
	if err != nil {
		panic(err)
	}
	return expr
}

// ParseConcurrent parses multiple expressions concurrently.
// It returns a slice of results in the same order as the inputs.
// If any parse fails, it returns an error and any successfully parsed expressions.
func ParseConcurrent(ctx context.Context, inputs []string) ([]*Expression, error) {
	var (
		wg      sync.WaitGroup
		mu      sync.Mutex
		results = make([]*Expression, len(inputs))
		errs    = make([]error, len(inputs))
	)

	// No semaphore or lock needed for Parse operations since each gets its own module instance
	for i, input := range inputs {
		wg.Add(1)
		go func(idx int, expr string) {
			defer wg.Done()

			result, err := Parse(ctx, expr)
			mu.Lock()
			results[idx] = result
			errs[idx] = err
			mu.Unlock()
		}(i, input)
	}

	// Wait for all goroutines to complete
	wg.Wait()

	// Check for errors
	var errMsgs []string
	for i, err := range errs {
		if err != nil {
			errMsgs = append(errMsgs, fmt.Sprintf("input %d: %v", i, err))
		}
	}

	if len(errMsgs) > 0 {
		return results, &ParseError{msg: fmt.Sprintf("multiple parse errors: %v", errMsgs)}
	}

	return results, nil
}

// GetWasmTimestamp returns the current timestamp as reported by the WASM module.
// This demonstrates calling a WASI-enabled function from the WASM module.
func GetWasmTimestamp(ctx context.Context) (time.Time, error) {
	// Initialize the runtime and get compiled module
	rt, compiled, err := initRuntime(ctx)
	if err != nil {
		return time.Time{}, fmt.Errorf("failed to initialize runtime: %w", err)
	}

	// Create a new module instance for this operation with a unique name
	moduleConfig := wazero.NewModuleConfig().
		WithName(getUniqueModuleName()).
		WithArgs("{{ project_slug_underscore }}_go_wasm").
		WithSysWalltime().
		WithSysNanotime().
		WithRandSource(rand.Reader)

	module, err := rt.InstantiateModule(ctx, compiled, moduleConfig)
	if err != nil {
		return time.Time{}, fmt.Errorf("failed to instantiate WASM module: %w", err)
	}
	defer module.Close(ctx)

	// Call the get_timestamp_ms function
	getTimestamp := module.ExportedFunction("get_timestamp_ms")
	if getTimestamp == nil {
		return time.Time{}, errors.New("get_timestamp_ms function not exported from WASM module")
	}

	results, err := getTimestamp.Call(ctx)
	if err != nil {
		return time.Time{}, fmt.Errorf("failed to call get_timestamp_ms: %w", err)
	}

	timestampMs := results[0]
	return time.Unix(0, int64(timestampMs)*int64(time.Millisecond)), nil
}

// Close cleans up the WASM runtime and module.
// It should be called when the application is shutting down.
func Close(ctx context.Context) error {
	runtimeMutex.Lock()
	defer runtimeMutex.Unlock()

	if runtime != nil {
		err := runtime.Close(ctx)
		runtime = nil
		return err
	}
	return nil
}
