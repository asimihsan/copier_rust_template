set shell := ["bash", "-c"]
set dotenv-load := true

{%- if include_wasm %}
mod web
{%- endif %}

{%- if include_python %}
mod python
{%- endif %}

{%- if include_go %}
mod go
mod go-wasm
{%- endif %}

# Default action is to list all available tasks
@default:
    @just --list

setup:
    #!/usr/bin/env bash
    set -e

    devbox install
    mise trust
    mise install

    if [[ "$OSTYPE" == "darwin"* ]]; then
        just mac-setup
    fi

    {%- if include_python %}
    (cd python && uv venv)
    (cd python && uv sync)
    {%- endif %}

    rustup toolchain install nightly
    rustup target add wasm32-wasip1
    cargo binstall cargo-llvm-cov --secure --no-confirm
    rustup component add llvm-tools-preview
    rustup component add rustfmt
    rustup component add clippy
    cargo binstall cargo-nextest --secure --no-confirm
    cargo binstall cargo-deny --secure --no-confirm
    pre-commit install
    pre-commit install-hooks

mac-setup:
    #!/usr/bin/env bash
    set -e

    if [[ "$OSTYPE" != "darwin"* ]]; then
        echo "This script is only for macOS."
        exit 1
    fi

    if ! command -v brew &> /dev/null; then
        echo "brew command not found, please install Homebrew first."
        exit 1
    fi

    brew install libiconv llvm
    cargo binstall cargo-llvm-cov --secure --no-confirm
    rustup component add llvm-tools-preview
    rustup component add llvm-tools-preview --toolchain nightly-aarch64-apple-darwin
    if ! xcode-select -p >/dev/null 2>&1; then
        xcode-select --install
        sudo xcode-select --switch /Library/Developer/CommandLineTools
    fi

update-deps:
    cargo update

# Development tasks
watch:
    cargo watch -x check -x test

# Rust tasks
rust-check:
    cargo check --all-targets

rust-test:
    cargo nextest run --all-targets --no-fail-fast
    cargo test --doc --no-fail-fast

rust-doc:
    cargo doc --no-deps --document-private-items

rust-audit:
    cargo audit || exit 1
    cargo deny check || exit 1

rust-build:
    cargo build

rust-fmt:
    cargo fmt --all

rust-clippy:
    cargo clippy --all-targets -- -D warnings

rust-clean:
    cargo clean

copyright:
    mise x -- bash -c 'fd -e rs -e ts -e js -e jsx -e tsx -e go -e py | xargs addlicense -f copyright.tmpl -c "{{ author_name }}" -v -s'

copyright-check:
    mise x -- bash -c 'fd -e rs -e ts -e js -e jsx -e tsx -e go -e py | xargs addlicense -f copyright.tmpl -c "{{ author_name }}" -v -s -check'

# Combined tasks
check: rust-check rust-fmt rust-clippy rust-audit copyright-check
    {%- if include_wasm %}
    just web lint
    {%- endif %}
    {%- if include_python %}
    just python lint
    {%- endif %}
    {%- if include_go %}
    just go lint
    just go-wasm lint
    {%- endif %}

test: rust-test
    {%- if include_wasm %}
    just web test
    {%- endif %}
    {%- if include_python %}
    just python test
    {%- endif %}
    {%- if include_go %}
    just go test
    just go-wasm test
    {%- endif %}

cov:
    #!/usr/bin/env bash
    set -e
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        cargo +nightly llvm-cov nextest
    else
        cargo llvm-cov nextest
    fi

cov-local:
    #!/usr/bin/env bash
    set -e
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        cargo +nightly llvm-cov nextest --no-fail-fast --text --show-missing-lines --mcdc
    else
        cargo llvm-cov nextest --no-fail-fast --text --show-missing-lines --mcdc
    fi

build: rust-build
    {%- if include_wasm %}
    just web build
    {%- endif %}
    {%- if include_python %}
    just python build
    {%- endif %}
    {%- if include_go %}
    just go build
    {%- endif %}

clean: rust-clean
    {%- if include_wasm %}
    just web clean
    {%- endif %}
    {%- if include_python %}
    just python clean
    {%- endif %}
    {%- if include_go %}
    just go clean
    {%- endif %}

{%- if include_wasm %}
web-dev: build
    just web dev
{%- endif %}

# CI tasks
ci: build check test cov
